mode: restart
blueprint:
  name: Notifications
  source_url: https://github.com/Maranatha34/Home-Assistant-Blueprints/blob/main/Notifications.yaml
  homeassistant:
    min_version: 2023.11.0
  domain: script
  author: Maranatha34/Home-Assistant-Blueprints
  description: <a href="https://github.com/Maranatha34/Home-Assistant-Blueprints/blob/main/Notifications.yaml" target="_blank">Github Link</a>

##############################
# Fields
##############################
fields:
  notify_device:
    name: "📲 Device to notify"
    description: >-
        Device needs to run the official [Home Assistant Companion](https://companion.home-assistant.io/) app to receive notifications.<br><br>
        ❔ Only used with `📲 Notification Strategy: Device`<br>
        👍🏻 `Device` is the preferred and default option.
    default: ""
    selector:
      device:
        filter:
          - integration: mobile_app

  title:
    name: "🏷️ Title"
    description: "The title of the notification.  \n\n`Optional`\n"
    default: ""
    selector:
      text:
  subtitle:
    name: "🏷️ Subtitle"
    description: "The subtitle of the notification.  \n\n`Optional`\n"
    default: ""
    selector:
      text:
  message:
    name: "💬 Message"
    description: "The message body to display on the notification.  \n\n`🤖 Android`: You may add [HTML formatting](https://companion.home-assistant.io/docs/notifications/notifications-basic?_highlight=tag#notification-message-html-formatting) to customise the look of the message."
    selector:
      text:

  icon:
    name: "🙂 Icon"
    description: "Custom icon for this notification.  \n\n`🤖 Android Only`, `Optional`"
    default: ""
    selector:
      icon:
  enable_icon_color:
    name: "🎨 Use Icon Color"
    description: "If disabled, uses default icon color.  \n\n`🤖 Android Only`, `Optional`"
    default: false
    selector:
      boolean:
  icon_color:
    name: "🎨 Icon Color"
    description: "Custom icon color for this notification.  \n\n`🤖 Android Only`, `Optional`"
    default: [102, 186, 240]
    selector:
      color_rgb:

  enable_timeout:
    name: "⌛️ Enable Timeout"
    description: "Require script to stop listening after the set duration.<br><br>👍🏻 Recommended to enable.<br>⚠️ If disabled, script will wait for response indefinitely until the next time it is triggered."
    default: true # Default `true` for backward compatibility.
    selector:
      boolean:
  timeout:
    name: "⌛️ Timeout Duration"
    description: "Amount of time to wait for an action response before firing timeout action.  \n\n👍🏻 Recommended: ≥1 minute, to allow notifications to be sent.  \nDefault: 15 minutes. \n"
    default:
      hours: 0
      minutes: 15
      seconds: 0
    selector:
      duration:
        enable_day: false
  clear_on_timeout:
    name: "🧹 Clear notification on timeout"
    description: "Dismiss the notification after action selection times out."
    default: false
    selector:
      boolean:
  persist:
    name: "🚩 Persistent Notification"
    description: "Prevents notifications from being swiped away by accident.  \n\n`🤖 Android Only`"
    default: false
    selector:
      boolean:

  notification_link:
    name: "🔗 Notification Link"
    description: "Link to navigate to upon clicking the notification.  \n\n Examples:  \n - Home Assistant relative links: `/config/updates` or `/lovelace/home`  \n - Apps: `app://<package name>`  \n - Entity `More Info` Panel: `entityId:<entity_ID>`  \n - Deep links: `deep-link://<deep_link>`  \n\nSee [documentation](https://companion.home-assistant.io/docs/notifications/notifications-basic/#opening-a-url) for more information and options.  \n\n`Optional`"
    default: ""
    selector:
      text:

  attachment_type:
    name: "📸 Attachment Type"
    description: >
      Choose to send an attachment along with the notification.<br>

      `Optional`
    default: "none"
    selector:
      select:
        options:
          - label: "None"
            value: "none"
          - label: "Camera"
            value: "camera_entity"
  attachment_camera_entity:
    name: "📸 Attachment: Camera Entity"
    description: >-
      Camera Entity to display snapshots of on the notification.<br>

      Please note, iOS and Android have differing vehaviours, as specified in the documentation.
      See the links below for more information.

      <table><tr><td> <a target="_blank" href="https://companion.home-assistant.io/docs/notifications/dynamic-content#camera-stream"> Camera Stream</a></td><td> <a target="_blank" href="https://companion.home-assistant.io/docs/notifications/notification-attachments#automatic-snapshots">🤖 Automatic Snapshots</a></td></tr></table><br>

      ❔ Only used with `Attachment Type: Camera`
    default: ""
    selector:
      entity:
        filter:
          - domain: "camera"

  car_ui:
    name: "🚘 Show on Android Auto"
    description: "Display notification on Android Auto interface.  \n\n`🤖 Android Only`"
    default: false
    selector:
      boolean:
  tag:
    name: "🔖 Tag"
    description: "Used to uniquely identify the notification.  \n\nUse tag if you are using this script with other notification services.  \nLeave empty otherwise.  \n\nExample: `my_awesome_notification_for_device_X`  \n\n👍🏻 Recommended to leave empty\n\n`Optional`"
    default: ""
    selector:
      text:
  group:
    name: "📣 Notification Group ID"
    description: "Used for grouping different notifications together visually.  \n\n⚠️ iOS critical notifications do no support grouping.  \nSee [documentation](https://companion.home-assistant.io/docs/notifications/notifications-basic?_highlight=tag#grouping) for more information.  \n\n`Optional`"
    default: ""
    selector:
      text:
  channel:
    name: "📣 Notification Channel"
    description: "Defines the channel, to be used with Importance.  \nRelates to the importance of the notification.  \n\n`🤖 Android Only`, `Optional`"
    default: "General"
    selector:
      text:
  importance:
    name: "❕ Notification Channel Importance"
    description: "See [documentation](https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-channel-importance) for more information.  \n\n`🤖 Android Only`"
    default: default
    selector:
      select:
        options:
          - label: "Urgent (Makes a sound with heads-up notification)"
            value: high
          - label: "Default (Makes a sound)"
            value: default
          - label: "Silent (Makes no sound)"
            value: low
          - label: "Low (Makes no sound, doesn't appear in status bar)"
            value: min
  android_high_priority:
    name: "❕ High Priority Mode"
    description: "Workaround to ensure notifications are delivered in timely fashion. This will override the Notification Channel Importance with `importance: high`, and set `ttl: 0`.  \n\n`🤖 Android Only`"
    default: true
    selector:
      boolean:
  interruption_level:
    name: "❕ Interruption Level"
    description: "See [documentation](https://companion.home-assistant.io/docs/notifications/notifications-basic/#interruption-level) for more information.  \n\n` iOS Only`"
    default: active
    selector:
      select:
        options:
          - label: "Silent (Makes no sound, does not wake screen)"
            value: passive
          - label: "Default"
            value: active
          - label: "Important (Overrides Focus)"
            value: time-sensitive
          - label: "Critical (Overrides Focus and Mute, restricted features)"
            value: critical
  visibility:
    name: "🔏 Notification Lockscreen Visibility"
    description: "Show or hide notification content on the lockscreen.  \nSee [documentation](https://companion.home-assistant.io/docs/notifications/notifications-basic?_highlight=tag#notification-sensitivity--lock-screen-visibility) for more information.  \n\nDefault: `Private`  \n\n`🤖 Android Only`"
    default: "private"
    selector:
      select:
        options:
          - label: "Public: Always show content."
            value: public
          - label: "Private: Show content based on phone settings."
            value: private
          - label: "Secret: Always hide content on the lockscreen."
            value: secret



sequence:
  ##############################
  # Setup Variables
  ##############################
  - alias: Basic Notification Content
    variables:
      title: title
      subtitle: subtitle
      message: message

  - alias: Common Configuration Options
    variables:
      notification_link: notification_link
      tag: "{{ iif(tag|length, tag, this.entity_id ~ '-' ~ context.id) }}"
      group: group

  - alias: Android Configuration Options
    variables:
      channel: channel
      visibility: visibility
      importance: importance
      persist: persist
      car_ui: car_ui

      # [Notification Banner Icon]
      notification_icon: icon
      enable_icon_color: enable_icon_color
      icon_color_selector: icon_color
      icon_color_hex: '{{ "#{:02x}{:02x}{:02x}".format(icon_color_selector[0], icon_color_selector[1], icon_color_selector[2]) }}'
      android_high_priority: android_high_priority

  - alias: iOS Configuration Options
    variables:
      interruption_level: interruption_level

  - alias: Timeout
    variables:
      enable_timeout: enable_timeout
      clear_on_timeout: clear_on_timeout
      timeout: timeout
      timeout_seconds: "{{ (timeout.hours * 60 + timeout.minutes) * 60 + timeout.seconds }}"
      swipe_away_as_timeout: swipe_away_as_timeout

  - alias: Attachments
    variables:
      attachment_type: attachment_type
      attachment_camera_entity: attachment_camera_entity
      camera_image_url: >-
        {% if (attachment_camera_entity|length) %}
          {% if (state_attr(attachment_camera_entity,'entity_picture')|length) %}
            {{state_attr(attachment_camera_entity,'entity_picture')}}
          {% else %}
            {{"/api/camera_proxy/{id}".format(id=attachment_camera_entity)}}
          {%- endif %}
        {%- endif %}
      media_url: >-
        {{
          {
            'none': '',
            'camera_entity': iif(camera_image_url | length, camera_image_url)
          }.get(attachment_type)
        }}

  - alias: Device Configuration
    variables:
      notify_device: notify_device
      notify_service: >-
        {{ "notify.mobile_app_{id}".format(id=device_attr(notify_device,'name')|slugify) }}














  - alias: Setup Payload
    variables:
      # Build OS specific notification payloads.
      notification_data: >-
        {% set apple_device = 'APPLE' in (device_attr(notify_device, "manufacturer")|upper) %}
        {% set payload = namespace(data={ 'apple_device': apple_device }) %}
        {% if payload.data.apple_device %}
          {# iOS #}
          {% set push = namespace(d={}) %}
          {% set payload.data = dict(payload.data, **{ 'subtitle': subtitle }) %}
          {% set push.d = dict(push.d, **{ 'interruption-level': interruption_level }) %}
          {% if notification_link|length %}{% set payload.data = dict(payload.data, **{ 'url': notification_link }) %}{% endif %}
          {% if attachment_type == 'camera_entity' %}{% set payload.data = dict(payload.data, **{ 'entity_id': attachment_camera_entity }) %}{% endif %}
          {% set payload.data = dict(payload.data, **{ 'push': push.d }) %}
        {% else %}
          {# Android #}
          {% set payload.data = dict(payload.data, **{ 'subject': subtitle }) %}
          {% set payload.data = dict(payload.data, **{ 'visibility': visibility }) %}
          {% set payload.data = dict(payload.data, **{ 'importance': importance }) %}
          {% if android_high_priority %}{% set payload.data = dict(payload.data, **{ 'priority': 'high', 'ttl': 0 }) %}{% endif %}
          {% if notification_link|length %}{% set payload.data = dict(payload.data, **{ 'clickAction': notification_link }) %}{% endif %}
          {% if attachment_type == 'camera_entity' and (media_url|length) %}{% set payload.data = dict(payload.data, **{ 'image': media_url }) %}{% endif %}
          {% if notification_icon|length %}{% set payload.data = dict(payload.data, **{ 'notification_icon': notification_icon }) %}{% endif %}
          {% if enable_icon_color %}{% set payload.data = dict(payload.data, **{ 'color': icon_color_hex }) %}{% endif %}
          {% if enable_timeout and clear_on_timeout %}{% set payload.data = dict(payload.data, **{ 'timeout': timeout_seconds }) %}{% endif %}
          {% if channel|length %}{% set payload.data = dict(payload.data, **{ 'channel': channel }) %}{% endif %}
          {% if persist %}{% set payload.data = dict(payload.data, **{ 'persistent': persist }) %}{% endif %}
          {% if car_ui %}{% set payload.data = dict(payload.data, **{ 'car_ui': car_ui }) %}{% endif %}
        {% endif %}
        {# Common  #}
        {% set payload.data = dict(payload.data, **{ 'tag': tag }) %}
        {% if group|length %}{% set payload.data = dict(payload.data, **{ 'group': group }) %}{% endif %}
        {{ payload.data }}

  ##############################
  # Send Notification
  ##############################
  - alias: "Send notification"
    service: "{{ notify_service }}"
    data:
      title: "{{ title }}"
      message: "{{ message }}"
      data: "{{ notification_data }}"

  ##############################
  # Return user response
  ##############################
  - stop: "Script stopped."